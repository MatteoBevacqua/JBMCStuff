JBMC version 5.54.0 (cbmc-5.54.0) 64-bit x86_64 linux
Parsing ...
Trying to load Java main class: ArithmeticErrors.IntegerOverflow
Found Java main class: ArithmeticErrors.IntegerOverflow
Converting
Java: added 2264 String or Class constant symbols
Generating GOTO Program
Running GOTO functions transformation passes
Running with 16 object bits, 48 offset bits (default)
Starting Bounded Model Checking
Unwinding loop __CPROVER__start.0 iteration 1  thread 0
Unwinding loop __CPROVER__start.0 iteration 2  thread 0
Unwinding loop __CPROVER__start.0 iteration 3  thread 0
Unwinding loop __CPROVER__start.0 iteration 4  thread 0
Unwinding loop __CPROVER__start.0 iteration 5  thread 0
Unwinding recursion java::java.lang.Float.<clinit_wrapper> iteration 1
Unwinding recursion java::java.lang.Math.<clinit_wrapper> iteration 1
Unwinding recursion java::java.lang.Double.<clinit_wrapper> iteration 1
Unwinding recursion java::java.lang.Math.<clinit_wrapper> iteration 1
Unwinding recursion java::ArithmeticErrors.IntegerOverflow.<clinit_wrapper> iteration 1
aborting path on assume(false) at file ArithmeticErrors/IntegerOverflow.java line 8 function java::ArithmeticErrors.IntegerOverflow.main:([Ljava/lang/String;)V bytecode-index 16 thread 0
Runtime Symex: 0.0147325s
size of program expression: 1184 steps
simple slicing removed 8 assignments
Generated 30 VCC(s), 1 remaining after simplification
Runtime Postprocess Equation: 6.8606e-05s
Passing problem to string refinement loop with MiniSAT 2.2.1 without simplifier
converting SSA
Runtime Convert SSA: 0.00140158s
Running string refinement loop with MiniSAT 2.2.1 without simplifier
BV-Refinement: post-processing
BV-Refinement: iteration 1
12208 variables, 22592 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Runtime Solver: 0.00737561s
Runtime decision procedure: 0.0107997s
